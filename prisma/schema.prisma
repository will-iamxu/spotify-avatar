generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  spotifyId     String?   @unique
  spotifyData   Json?     // Store top artists, tracks, genres
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Subscription info
  tier          UserTier  @default(FREE)
  usageCount    Int       @default(0)
  usageResetAt  DateTime  @default(now())
  
  // Relations
  avatars       Avatar[]
  sessions      Session[]
  accounts      Account[]

  @@map("users")
}

model Avatar {
  id          String      @id @default(cuid())
  userId      String
  imageUrl    String
  prompt      String
  metadata    Json?       // Store generation settings, model used, etc.
  status      AvatarStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("avatars")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model ApiUsage {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String   // e.g., "generate-avatar", "download-avatar"
  cost      Float?   // API cost in USD
  metadata  Json?    // Request details
  createdAt DateTime @default(now())

  @@map("api_usage")
}

enum UserTier {
  FREE
  PRO
  ENTERPRISE
}

enum AvatarStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
}
